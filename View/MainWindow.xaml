<!-- Most of the text in this tag can be safely ignored, as it's all autogenerated and doesn't matter unless you're trying
    to change something's name. -->
<Window x:Class="InitiativeTracker.View.MainWindow"
        UseLayoutRounding="True"
        SnapsToDevicePixels="True"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        PreviewKeyUp="MainWindow_OnPreviewKeyUp"
        Closing="MainWindow_OnClosing"
        Title="Manage initiative" Height="450" Width="800" Background="{StaticResource StandardBackgroundBrush}">
    <!-- Setting a margin value of 5 sets the spacing to 5 device-independent pixels around every side of the Grid. 
    It's basically shorthand for "5,5,5,5".
    
    When defining different margin values for different sides, use the general syntax [left],[top],[right],[bottom].-->
    <Grid Margin="5">
        <!-- To add a component to a column, just pass the appropriate column index to the Grid.Column parameter. -->
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="200"/>
            <ColumnDefinition Width="2.5"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <!-- This references a Style, which is a special kind of resource that can be used to define certain
        parameters and apply them to multiple different controls of (generally) the same type. See Palette/Styles.xaml. 
        
        Also note the usage of DynamicResource to refer to a context menu (Ctm_TreeView) before it is created. -->
        <Border Grid.Column="0" Style="{StaticResource StandardBorder}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <Border Grid.Row="0" BorderThickness="0,0,0,1" Style="{StaticResource StandardBorder}">
                    <Grid Height="28.5">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <ToolBar>
                            <Menu>
                                <MenuItem Header="Save" IsEnabled="{Binding Source={StaticResource TreeEntryStackProvider}, Path=TreeEntryStack.Count, Converter={StaticResource IsGreaterThanZeroConverter}}">
                                    <MenuItem Header="Save all" Click="Mni_SaveAll_OnClick"/>
                                    <MenuItem Header="Save specific" Click="Mni_SaveSelected_OnClick"/>
                                </MenuItem>

                                <MenuItem Header="Load">
                                    <MenuItem Header="Load all" Click="Mni_LoadAll_OnClick"/>
                                    <MenuItem Header="Load specific" Click="Mni_LoadSelected_OnClick"/>
                                    <Separator/>
                                    <MenuItem Header="Convert old files" Click="Ctm_ConvertEntities_OnClick"/>
                                </MenuItem>
                            </Menu>
                        </ToolBar>
                    </Grid>
                </Border>
                <TreeView x:Name="Trv_EntityTray" 
                          Grid.Row="1"
                          AllowDrop="True" 
                          Drop="Trv_EntityTray_OnDrop" 
                          MouseMove="Trv_EntityTray_OnMouseMove" 
                          MouseDown="Trv_Entities_OnMouseDown"  
                          ItemsSource="{Binding Source={StaticResource TreeEntryStackProvider}, Path=TreeEntryStack}"
                          ContextMenu="{DynamicResource Ctm_TreeView}">
                    <TreeView.Resources>
                        <ContextMenu x:Key="Ctm_TrayEntity">
                            <MenuItem Header="Push" Click="Ctm_PushTreeEntity_OnClick"/>
                            <MenuItem Header="Edit" Click="Ctm_EditTreeEntity_OnClick"/>
                            <MenuItem Header="Delete" Click="Ctm_DeleteTreeEntry_OnClick"/>
                        </ContextMenu>

                        <ContextMenu x:Key="Ctm_TrayFolder">
                            <MenuItem Header="New entity here..." Click="Ctm_TrayFolderNewEntity"/>
                            <MenuItem Header="New folder here..." Click="Ctm_TrayFolderNewFolder"/>
                            <MenuItem Header="New generator here..." Click="Ctm_TrayFolderNewFolder"/>
                            <Separator/>
                            <MenuItem Header="Push contents" Click="Ctm_PushTreeEntity_OnClick"/>
                            <MenuItem Header="Delete contents" Click="Ctm_DeleteContents_OnClick"/>
                            <Separator/>
                            <MenuItem Header="Edit" Click="Ctm_TrayFolderEdit_OnClick"/>
                            <MenuItem Header="Delete" Click="Ctm_DeleteTreeEntry_OnClick"/>
                        </ContextMenu>

                        <ContextMenu x:Key="Ctm_TrayGenerator">
                            <MenuItem Header="New entity here..." Click="Ctm_TrayFolderNewEntity"/>
                            <MenuItem Header="New folder here..." Click="Ctm_TrayFolderNewFolder"/>
                            <MenuItem Header="New generator here..." Click="Ctm_TrayFolderNewGenerator_OnClick"/>
                            <Separator/>
                            <MenuItem Header="Execute generator" Click="Ctm_ExecuteGenerator_OnClick"/>
                            <MenuItem Header="Execute and push" Click="Ctm_ExecuteAndPush_OnClick"/>
                            <Separator/>
                            <MenuItem Header="Push contents" Click="Ctm_PushTreeEntity_OnClick"/>
                            <MenuItem Header="Delete contents" Click="Ctm_DeleteContents_OnClick"/>
                            <Separator/>
                            <MenuItem Header="Edit" Click="Ctm_TrayGeneratorEdit_OnClick"/>
                            <MenuItem Header="Delete" Click="Ctm_DeleteTreeEntry_OnClick"/>
                        </ContextMenu>

                        <ContextMenu x:Key="Ctm_TreeView">
                            <MenuItem Header="New entity" Click="Ctm_NewEntity_OnClick"/>
                            <MenuItem Header="New folder" Click="Ctm_TreeViewNewFolder_OnClick"/>
                            <MenuItem Header="New generator" Click="Ctm_NewGenerator_OnClick"/>
                            <Separator/>
                            <MenuItem Header="Push all" Click="Ctm_TrayPushAll_OnClick"/>
                            <MenuItem Header="Delete all" Click="Ctm_TreeViewDeleteAll_OnClick"/>
                        </ContextMenu>
                    </TreeView.Resources>

                    <TreeView.ItemContainerStyle>
                        <Style TargetType="TreeViewItem">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Type, Converter={StaticResource EnumToStringConverter}}" Value="Entity">
                                    <Setter Property="ContextMenu" Value="{StaticResource Ctm_TrayEntity}"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Type, Converter={StaticResource EnumToStringConverter}}" Value="Folder">
                                    <Setter Property="ContextMenu" Value="{StaticResource Ctm_TrayFolder}"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Type, Converter={StaticResource EnumToStringConverter}}" Value="Generator">
                                    <Setter Property="ContextMenu" Value="{StaticResource Ctm_TrayGenerator}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TreeView.ItemContainerStyle>

                    <TreeView.ItemTemplate>
                        <!-- this magically allows WPF to display recursive/tree-based data structures. -->
                        <HierarchicalDataTemplate ItemsSource="{Binding Contents}">
                            <HierarchicalDataTemplate.Resources>
                                <Style TargetType="Label">
                                    <!-- Here we bind to different properties depending on the type of entity (Generators and Folders always
                                have a null AttachedElement so we use DisplayName instead. the converter is necessary to, well, convert
                                the raw enum value to a string that WPF can compare. -->
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Type, Converter={StaticResource EnumToStringConverter}}" Value="Entity">
                                            <Setter Property="Content" Value="{Binding AttachedEntity.Name}"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Type, Converter={StaticResource EnumToStringConverter}}" Value="Generator">
                                            <Setter Property="Content" Value="{Binding DisplayName}"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Type, Converter={StaticResource EnumToStringConverter}}" Value="Folder">
                                            <Setter Property="Content" Value="{Binding DisplayName}"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </HierarchicalDataTemplate.Resources>

                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="25"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>

                                <Image Grid.Column="0" RenderOptions.BitmapScalingMode="Fant">
                                    <Image.Resources>
                                        <Style TargetType="Image">
                                            <Setter Property="Source" Value="../Resources/Images/folder.png"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Type, Converter={StaticResource EnumToStringConverter}}" Value="Entity">
                                                    <Setter Property="Source" Value="../Resources/Images/entity.png"/>
                                                </DataTrigger>

                                                <DataTrigger Binding="{Binding Type, Converter={StaticResource EnumToStringConverter}}" Value="Generator">
                                                    <Setter Property="Source" Value="../Resources/Images/generator.png"/>
                                                </DataTrigger>

                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding Type, Converter={StaticResource EnumToStringConverter}}" Value="Folder"/>
                                                        <Condition Binding="{Binding Contents.Count, Converter={StaticResource IsGreaterThanZeroConverter}}" Value="True"/>
                                                    </MultiDataTrigger.Conditions>

                                                    <MultiDataTrigger.Setters>
                                                        <Setter Property="Source" Value="../Resources/Images/fullFolder.png"/>
                                                    </MultiDataTrigger.Setters>
                                                </MultiDataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Image.Resources>
                                </Image>
                                <Label Grid.Column="1"/>
                            </Grid>
                        </HierarchicalDataTemplate>
                    </TreeView.ItemTemplate>
                </TreeView>
            </Grid>
        </Border>

        <GridSplitter Grid.Column="1" HorizontalAlignment="Stretch" ResizeBehavior="PreviousAndNext" VerticalAlignment="Stretch" Background="{StaticResource GentleHightlightBrush}"/>

        <!-- Identical border to the first, but surrounding the main initiative panel. Within the border, I defined
        another Grid containing two rows, one of which is used to display the header. -->
        <Border Grid.Column="2" Style="{StaticResource StandardBorder}">
            <Grid>
                <!-- You can define  resources in most components. The resources (styles, colors, etc.) can be used only 
                by the component and any child components. Here, I define a single resource — a label style that will be 
                used by all header labels. -->
                <Grid.Resources>
                    <!-- Note that if I didn't specify an x:Key, the style would automatically apply to all child labels of the 
                    component containing the Resources tag. However, I only want some of them to be bold. -->
                    <Style x:Key="HeaderLabel" TargetType="Label">
                        <Setter Property="FontSize" Value="17"/>
                        <Setter Property="FontWeight" Value="Bold"/>
                        <Setter Property="HorizontalAlignment" Value="Center"/>
                        <Setter Property="VerticalAlignment" Value="Center"/>

                        <!-- Setting this value is necessary to prevent "tall" letters like 'y' from being cut off. -->
                        <Setter Property="Padding" Value="0"/>
                    </Style>
                </Grid.Resources>

                <Grid.RowDefinitions>
                    <RowDefinition Height="30"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <!-- Header border definition. Note the syntax used to define a border containing only the bottom edge,
                as well as the style property overloading (the StandardBorder sets a BorderThickness value of 1, which we
                can override by defining it here. -->
                <Border Grid.Row="0" BorderThickness="0,0,0,1" Style="{StaticResource StandardBorder}">
                    <!-- Header grid. -->
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <!-- This will scale columns at a 1.5:1:1:1:1 ratio, which leaves a bit more room for the name
                            and keeps everything else the same size. Also ignores a 19-dpi section at the end to account for
                            the vertical scrollbar width -->
                            <ColumnDefinition Width="1.5*"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="0.5*"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="19"/>
                        </Grid.ColumnDefinitions>

                        <Label Grid.Column="0" Content="Name" Style="{StaticResource HeaderLabel}"/>
                        <Label Grid.Column="1" Content="Health" Style="{StaticResource HeaderLabel}"/>
                        <Label Grid.Column="2" Content="Armor Class" Style="{StaticResource HeaderLabel}"/>
                        <Label Grid.Column="3" Content="Dexterity" Style="{StaticResource HeaderLabel}"/>
                        <Label Grid.Column="4" Content="Hide" Style="{StaticResource HeaderLabel}"/>
                        <Label Grid.Column="5" Content="Initiative" Style="{StaticResource HeaderLabel}"/>
                    </Grid>
                </Border>

                <!-- This ScrollViewer contains the components responsible for actually displaying the initiative order on the management
                side. -->
                <ScrollViewer x:Name="OnLoad" Grid.Row="1" VerticalScrollBarVisibility="Visible">
                    <ListView x:Name="Lsv_InitiativeStack" 
                              SelectionMode="Extended"
                              ContextMenu="{DynamicResource Ctm_InitiativeStack}" 
                              ItemsSource="{Binding Source={StaticResource EntityStackProvider}, Path=InitiativeStack}">
                        <ListView.Resources>
                            <ContextMenu x:Key="Ctm_StackEntityMenu">
                                <MenuItem Header="Pull selected" Click="Ctm_PullStackEntity_OnClick"/>
                                <MenuItem Header="Delete selected" Click="Ctm_DeleteStackEntity_OnClick"/>
                                <Separator/>
                                <MenuItem Header="Edit" Click="Ctm_EditStackEntity_OnClick"/>
                                <Separator/>
                                <MenuItem Header="Pull all" Click="Ctm_InitiativeStackPullAll_OnClick"/>
                                <MenuItem Header="Delete all" Click="Ctm_InitiativeStackDeleteAll_OnClick"/>
                            </ContextMenu>

                            <ContextMenu x:Key="Ctm_InitiativeStack">
                                <MenuItem Header="Pull all" Click="Ctm_InitiativeStackPullAll_OnClick"/>
                                <MenuItem Header="Delete all" Click="Ctm_InitiativeStackDeleteAll_OnClick"/>
                            </ContextMenu>
                        </ListView.Resources>

                        <ListView.ItemContainerStyle>
                            <!-- this is necessary for proper scaling. WPF creates a container object — a ListViewItem — behind
                            the scenes, and this object is responsible for containing our grid, which won't size to
                            fit the available width becase its parent (the ListViewItem) is restricting it. -->
                            <Style TargetType="ListViewItem">
                                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>

                                <!-- This references a StaticResource which is our contextmenu -->
                                <Setter Property="ContextMenu" Value="{StaticResource Ctm_StackEntityMenu}"/>
                            </Style>
                        </ListView.ItemContainerStyle>

                        <ListView.ItemTemplate>
                            <DataTemplate>
                                <!-- In this grid we define the standard appearance of each part of an entity's entry,
                                as well as what it needs to bind to. -->
                                <Grid Height="25" Margin="-3,0,-3,0">
                                    <Grid.Style>
                                        <Style TargetType="Grid">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsHighlighted}" Value="True">
                                                    <Setter Property="Background" Value="{StaticResource GentleHightlightBrush}"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Grid.Style>

                                    <!-- standard settings for all child labels -->
                                    <Grid.Resources>
                                        <Style TargetType="Label">
                                            <Setter Property="FontSize" Value="15"/>
                                            <Setter Property="HorizontalAlignment" Value="Center"/>
                                            <Setter Property="VerticalAlignment" Value="Center"/>

                                            <Setter Property="Padding" Value="0"/>
                                        </Style>
                                    </Grid.Resources>

                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="1.5*"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="0.5*"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>

                                    <Canvas x:Name="Canvas" Grid.Column="0" VerticalAlignment="Stretch">
                                        <Grid Width="{Binding ElementName=Canvas, Path=ActualWidth}" Height="{Binding ElementName=Canvas, Path=ActualHeight}">
                                            <TextBlock VerticalAlignment="Center" 
                                                       FontSize="14" 
                                                       LineHeight="10" 
                                                       TextAlignment="Left" 
                                                       TextWrapping="Wrap" 
                                                       LineStackingStrategy="BlockLineHeight" 
                                                       Margin="2,3,0,0" 
                                                       Text="{Binding Name}"/>
                                        </Grid>
                                    </Canvas>
                                    
                                    <Label Grid.Column="1" Content="{Binding HealthDisplay}"/>
                                    <Label Grid.Column="2" Content="{Binding ArmorClass}"/>
                                    <Label Grid.Column="3" Content="{Binding DexterityDisplay}"/>
                                    <CheckBox Grid.Column="4" 
                                              IsChecked="{Binding IsHidden, Mode=TwoWay}" 
                                              Checked="Chb_IsHidden_IsChecked" 
                                              Unchecked="Chb_IsHidden_IsChecked" 
                                              HorizontalAlignment="Center" 
                                              VerticalAlignment="Center" 
                                              Padding="0"/>
                                    <Border Grid.Column="5" BorderBrush="{StaticResource GentleHightlightBrush}" BorderThickness="1">
                                        <Label Content="{Binding Initiative}"/>
                                    </Border>
                                </Grid>
                            </DataTemplate>
                        </ListView.ItemTemplate>
                    </ListView>
                </ScrollViewer>

                <Button Grid.Row="2" Content="Previous" Width="125" HorizontalAlignment="Left" Margin="1,0,0,1" Click="Btn_Previous_OnClick"/>
                <Button Grid.Row="2" Content="Next" Width="125" HorizontalAlignment="Right" Margin="0,0,1,1" Click="Btn_Next_OnClick"/>
            </Grid>
        </Border>
    </Grid>
</Window>